# Mobile application penetration testing is performed on mobile applications (excluding mobile APIs and servers).
from toolkit.models import TestLog, Project, TestResult, TestType, Vulnerability
from requests import *
import frida
import subprocess
from mitmproxy import http

import subprocess

import requests

def send_request(url):
    try:
        response = requests.get(url)
        print(f'Response code: {response.status_code}')
        print(f'Response body: {response.text}')
    except requests.exceptions.RequestException as err:
        print(f'Error: {err}')

# Replace with the URL of the mobile application endpoint you want to test
url = 'http://example.com'  
send_request(url)


#Frida
def on_message(message, data):
    print(message)

# Use the name of the process you want to attach to
process_name = 'com.example.app'

session = frida.get_usb_device().attach(process_name)

script = session.create_script("""
    // Find the base address of the module you're interested in
    var base = Module.findBaseAddress('libtarget.so');

    // Replace the offset with the actual offset of the function you want to hook
    var offset = 0x1234;  

    // Hook the function
    Interceptor.attach(base.add(offset), {
        onEnter: function(args) {
            console.log('Called function at offset 0x1234');
        },
        onLeave: function(retval) {
            console.log('Function returned');
        }
    });
""")

script.on('message', on_message)
script.load()

# Prevent the Python script from terminating
input('Press enter to exit...\n')



# For Drozer
# Path to the drozer console
drozer_path = '/path/to/drozer'

# The IP address and port of the drozer agent (default is 31415)
agent_ip = '192.168.1.2'
agent_port = 31415

# The command you want to run
command = 'run app.package.list'

# The drozer command
drozer_command = f'{drozer_path} console connect {agent_ip}:{agent_port} --execute "{command}"'

# Run the command
subprocess.run(drozer_command, shell=True)



# For Mitmproxy
def request(flow: http.HTTPFlow) -> None:
    # Only process GET requests
    if flow.request.method != "GET":
        return

    print(f"Intercepted request: {flow.request.url}")

    # Modify the request (optional)
    flow.request.headers["User-Agent"] = "MyCustomUserAgent"

# This script needs to be run with mitmdump, e.g. `mitmdump -s this_script.py`


# Path to the Needle tool
needle_path = '/path/to/needle'

# The IP address of the iOS device
device_ip = '192.168.1.2'

# The SSH port of the iOS device (default is 22)
device_port = 22

# The username and password for SSH
username = 'root'
password = 'alpine'

# The identifier of the app you want to test
app_id = 'com.example.app'

# The module you want to run
module = 'binary/info'

# The command to run Needle
command = f'{needle_path} -r {device_ip}:{device_port} -u {username} -p {password} -m {module} -t {app_id}'

# Run the command
subprocess.run(command, shell=True)

